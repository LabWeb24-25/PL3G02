@model LibSpace_Aspnet.Models.Livro

@{
    ViewData["Title"] = "Details";
}

<div class="DivGeneralDetails">
    <div class="upper-section">
        <div class="image-container">
            <!-- Div para a imagem -->
            <div>
                <img src="@Url.Content("~/Cover/" + Model.CapaImg)" alt="Imagem de @Model.CapaImg" class="image-details" />
            </div>

            <!-- Div para a descrição e botões -->
            <div class="description-wrapper">
                <p class="isbn">Ref: @Html.DisplayFor(model => model.Isbn)</p>
                <br />
                @if (User.IsInRole("Leitor"))
                {
                    @if (!ViewBag.IsFavorito)
                    {
                        <button id="favorite-button-@Model.IdLivro" class="favorite-button" data-livro-id="@Model.IdLivro">Adicionar Favorito</button>
                    }
                    else
                    {
                        <button id="Rfavorite-button-@Model.IdLivro" class="Rfavorite-button" data-livro-id="@Model.IdLivro">Remover Favorito</button>
                    }
                }
                @* @if (User.IsInRole("Admin"))
                {
                    <p class="isbn">Criado por: @ViewBag.BibliotecarioId</p>
                } *@
            </div>
        </div>
        <div class="DivInformation">
            <h4 class="textform_color">Nome: @Html.DisplayFor(model => model.TituloLivros)</h4>
            <p>de: @Html.DisplayFor(model => model.IdAutorNavigation.NomeAutor)</p>
            <hr />
            <p class="control-label textform_color"><strong>Editora:</strong> @Html.DisplayFor(model => model.IdEditoraNavigation.NomeEditora)</p>
            <p class="control-label textform_color"><strong>Sinopse:</strong></p>
            <p>@Html.Raw(Model.Sinopse?.Replace("\n", "<br />"))</p>
            <p class="control-label textform_color"><strong>Número de Exemplares Disponíveis:</strong> @Html.DisplayFor(model => model.NumExemplares)</p>
            <hr />
            <div class="action-links">
                @if (User.IsInRole("Bibliotecario"))
                {
                    <a href="~/Requisicao" class="btn_submit">Ver Requisitados</a>
                    <a asp-action="Edit" asp-route-id="@Model?.IdLivro" class="btn_submit">Editar Livro</a>
                    <button id="delete-button-@Model.IdLivro" class="btn_red" data-url="@Url.Action("Delete", new { id = Model.IdLivro })">Eliminar Livro</button>
                }
                @if (!User.IsInRole("Bibliotecario") && !User.IsInRole("Admin"))
                {
                    @if (ViewBag.estreq == 0)
                    {
                        <a asp-action="Requisitar" asp-route-id="@Model?.IdLivro" class="btn_submit">Requisitar</a>
                    }
                    @if (ViewBag.estreq == 1)
                    {
                        <div>
                            <button class="btn_gray" disabled>A Aguardar Requisição</button>
                            <button id="cancel-prereq-@Model.IdLivro" class="btn_red" data-livro-id="@Model.IdLivro">Cancelar Pré-requisição</button>
                        </div>
                    }
                    @if (ViewBag.estreq == 2)
                    {
                        <button class="btn_gray" disabled>Requisitado - Aguarda Entrega</button>
                    }
                }
            </div>
        </div>
    </div>

    <div class="DivInformation1">
        <h4 class="textform_color">Nome: @Html.DisplayFor(model => model.TituloLivros)</h4>
        <hr />
        <p class="control-label textform_color">
            <strong>Autor:</strong> 
            @if (@Model.IdAutorNavigation.Pseudonimo != null) {
                @Html.DisplayFor(model => model.IdAutorNavigation.Pseudonimo)
            }
            else
            {
                @Html.DisplayFor(model => model.IdAutorNavigation.NomeAutor)
            }
                <a asp-action="Details" asp-controller="Autors" asp-route-id="@Model.IdAutorNavigation.IdAutor">Ver detalhes do autor</a>
        </p>
        <p class="control-label textform_color"><strong>Editora:</strong> @Html.DisplayFor(model => model.IdEditoraNavigation.NomeEditora) <a asp-action="Details" asp-controller="Editoras" asp-route-id="@Model.IdEditoraNavigation.IdEditora">Ver detalhes da editora</a></p>
        <p class="control-label textform_color"><strong>Data de Edição:</strong> @Html.DisplayFor(model => model.DataEdicao)</p>
        <p class="control-label textform_color"><strong>Gênero:</strong> @Html.DisplayFor(model => model.IdGenerosNavigation.NomeGeneros)</p>
        <p class="control-label textform_color"><strong>País de Origem:</strong> @Html.DisplayFor(model => model.IdLinguaNavigation.NomePais)</p>
        <p class="control-label textform_color"><strong>Sinopse:</strong></p>
        <p>@Html.Raw(Model.Sinopse?.Replace("\n", "<br />"))</p>
    </div>
</div>

<br />
<div class="action-links">
    <button type="button" class="btn_submit" onclick="history.back()">Voltar</button>
</div>

<!-- Modal Confirmação delete -->
<div id="confirmModal" class="modal" style="display: none;">
    <div class="modal-content">
        <p id="modalMessage"></p>
        <div class="modal-buttons">
            <button id="confirmBtn" class="btn btn-success">Confirmar</button>
            <button id="cancelBtn" class="btn btn-danger">Cancelar</button>
        </div>
    </div>
</div>

<!-- Modal Informativo -->
<div id="infoModal" class="modal" style="display: none;">
    <div class="modal-content">
        <p id="infoMessage"></p>
        <div class="modal-buttons">
            <button class="btn btn-primary" id="okBtn">OK</button>
        </div>
    </div>
</div>

@section Styles {
    <!-- Font Awesome CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <!-- Custom CSS for Details Page -->
    <link rel="stylesheet" href="~/css/details_design_livro.css" />
}

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <style>
    .disabled {
        pointer-events: none; /* Desativa interações com o link */
        color: gray;         /* Muda a aparência visual */
        text-decoration: none;
    }
</style>
    <script>
        $(document).ready(function () {
            function atualizarBotaoFavorito(livroId, adicionar) {
                if (adicionar) {
                    $(`#favorite-button-${livroId}`)
                        .text('Adicionar Favorito')
                        .removeClass('Rfavorite-button')
                        .addClass('favorite-button');
                } else {
                    $(`#favorite-button-${livroId}`)
                        .text('Remover Favorito')
                        .removeClass('favorite-button')
                        .addClass('Rfavorite-button');
                }
            }

            // Função para adicionar favorito
            function adicionarFavorito(livroId) {
                $.ajax({
                    url: '@Url.Action("AdicionarFavorito", "Livroes")',
                    type: 'POST',
                    data: { idLivro: livroId },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            atualizarBotaoFavorito(livroId, false);
                        } else {
                            alert(response.message || 'Erro ao adicionar favorito.');
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.error("Erro ao fazer a solicitação:", {
                            status: jqXHR.status,
                            statusText: textStatus,
                            error: errorThrown
                        });
                        alert(`Erro ao adicionar o favorito. Código: ${jqXHR.status}, Erro: ${errorThrown}`);
                    }
                });
            }

            // Função para remover favorito
            function removerFavorito(livroId) {
                $.ajax({
                    url: '@Url.Action("RemoverFavorito", "Livroes")',
                    type: 'POST',
                    data: { idLivro: livroId },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            atualizarBotaoFavorito(livroId, true);
                        } else {
                            alert(response.message || 'Erro ao remover favorito.');
                        }
                    },
                    error: function () {
                        alert("Ocorreu um erro ao tentar remover o favorito.");
                    }
                });
            }

            // Event listeners para os botões de favorito
            $(document).on("click", ".favorite-button", function () {
                const livroId = $(this).data("livro-id");
                adicionarFavorito(livroId);
            });

            $(document).on("click", ".Rfavorite-button", function () {
                const livroId = $(this).data("livro-id");
                removerFavorito(livroId);
            });

            function cancelarPreRequisicao(livroId) {
                $.ajax({
                    url: '@Url.Action("CancelarPreRequisicao", "Livroes")',
                    type: 'POST',
                    data: { idLivro: livroId },
                    success: function (response) {
                        if (response.success) {
                            alert(response.message);
                            location.reload(); // Reload the page to update the status
                        } else {
                            alert(response.message || 'Erro ao cancelar pré-requisição.');
                        }
                    },
                    error: function () {
                        alert("Ocorreu um erro ao tentar cancelar a pré-requisição.");
                    }
                });
            }

            // Event listener for cancel button
            $(document).on("click", "[id^='cancel-prereq-']", function () {
                const livroId = $(this).data("livro-id");
                if (confirm("Tem certeza que deseja cancelar esta pré-requisição?")) {
                    cancelarPreRequisicao(livroId);
                }
            });
        });
    </script>
    <script>
        $(document).ready(function () {
            let currentUrl = '';

            function showModal(message, callback) {
                $("#modalMessage").text(message);
                $("#confirmModal").fadeIn();

                $("#confirmBtn").off().click(function () {
                    $("#confirmModal").fadeOut();
                    callback(true);
                });

                $("#cancelBtn").off().click(function () {
                    $("#confirmModal").fadeOut();
                    callback(false);
                });
            }

            function showInfoModal(message) {
                $("#infoMessage").text(message);
                $("#infoModal").fadeIn();

                $("#okBtn").off().click(function () {
                    $("#infoModal").fadeOut();
                    location.reload();
                });
            }

            function handleDelete(url) {
                showModal("Tem certeza que deseja eliminar este livro?", function (confirmed) {
                    if (confirmed) {
                        window.location.href = url;
                    }
                });
            }

            // Event listener for delete button
            $(document).on("click", "#delete-button-@Model.IdLivro", function () {
                const deleteUrl = $(this).data("url");
                handleDelete(deleteUrl);
            });
        });
    </script>

    <style>
        .modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .modal-content {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            width: 400px;
            max-width: 90%;
            text-align: center;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin: 0 20px;
        }

        .modal-buttons .btn {
            min-width: 100px;
            padding: 8px 16px;
        }

        #modalMessage {
            margin-bottom: 15px;
            font-size: 16px;
        }
    </style>

    <!-- Validation Scripts -->
    <partial name="_ValidationScriptsPartial" />
}

