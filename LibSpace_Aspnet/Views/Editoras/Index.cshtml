@model IEnumerable<LibSpace_Aspnet.Models.Editora>

@{
    ViewData["Title"] = "Editoras";
}

<div class="container-fluid">
    <div class="publishers-page">
        <div class="header-section">
            <h2 class="section-title">Editoras</h2>
            <button id="sortButton" class="btn btn-light btn-primary" onclick="toggleSort()">
                <i class="fas fa-sort-alpha-down"></i> A-Z
            </button>
        </div>

        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 row-cols-lg-4 g-4" id="publishersContainer">
            @foreach (var publisher in Model)
            {
                <div class="col" data-publisher-name="@publisher.NomeEditora">
                    <a href="@Url.Action("Details", "Editoras", new { id = publisher.IdEditora })" class="publisher-link">
                        <div class="card publisher-card">
                            <img src="@Url.Content("~/Editora_IMG/" + publisher.ImgEditora)" class="card-img-top" alt="@publisher.NomeEditora">
                            <div class="card-body text-center">
                                <h5 class="publisher-name">@publisher.NomeEditora</h5>
                            </div>
                        </div>
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .publishers-page {
        padding: 2rem;
    }

    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
    }

    .section-title {
        color: #004d40;
        margin: 0;
    }

    .publisher-card {
        height: 100%;
        max-height: 250px;
        display: flex;
        flex-direction: column;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease-in-out;
    }

    .publisher-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .card-img-top {
        width: 100%;
        height: 150px;
        object-fit: contain;
        padding: 1rem;
        background: #f6f6f6;
    }

    .publisher-name {
        color: #004d40;
        font-size: 1.1rem;
        margin: 0 auto;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 15ch;
    }

    .publisher-link {
        text-decoration: none;
        color: inherit;
        display: block;
    }

    .publisher-link:hover {
        text-decoration: none;
        color: inherit;
    }

    #sortButton {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        white-space: nowrap;
        border-color: #064d3b;
    }

    #sortButton:hover,
    #sortButton:focus,
    #sortButton:active {
        border-color: #053d2f;
    }

    #sortButton:focus {
        box-shadow: 0 0 0 0.25rem rgba(6, 77, 59, 0.25) !important;
    }

    #sortButton i {
        font-size: 0.9em;
    }

    @@media (max-width: 768px) {
        .publishers-page {
            padding: 1rem;
        }
        .publisher-card {
            max-height: 220px;
        }
        .card-img-top {
            height: 120px;
        }
        .publisher-name {
            font-size: 0.9rem;
        }
    }

    @@media (max-width: 576px) {
        .publishers-page {
            padding: 0.5rem;
        }
        .publisher-card {
            max-height: 200px;
        }
        .card-body {
            padding: 0.5rem;
        }

    }
</style>

@section Scripts {
    <script>
        let isAscending = true;

        function toggleSort() {
            const container = document.getElementById('publishersContainer');
            const publishers = Array.from(container.children);
            const button = document.getElementById('sortButton');
            
            isAscending = !isAscending;
            
            button.innerHTML = isAscending ? 
                '<i class="fas fa-sort-alpha-down"></i> A-Z' : 
                '<i class="fas fa-sort-alpha-up"></i> Z-A';

            publishers.sort((a, b) => {
                const nameA = a.dataset.publisherName.toLowerCase();
                const nameB = b.dataset.publisherName.toLowerCase();
                return isAscending ? 
                    nameA.localeCompare(nameB) : 
                    nameB.localeCompare(nameA);
            });

            publishers.forEach(publisher => container.appendChild(publisher));
        }
    </script>
}
